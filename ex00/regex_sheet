✅ POSIX regex.h Cheat Sheet
⚠️ Syntax here applies to regcomp() with the flag REG_EXTENDED. Always pass this flag unless you're required to use basic POSIX syntax.

🔤 Character Classes
Pattern	Meaning
.	Any single character except newline
[abc]	One of: a, b, or c
[^abc]	Any character except a, b, or c
[a-z]	Any lowercase letter
[A-Z]	Any uppercase letter
[0-9]	Any digit
[a-zA-Z]	Any letter

🔣 Predefined Character Classes
These are part of POSIX [[:...:]] syntax:

Pattern	Meaning
[[:alnum:]]	Letters and digits
[[:alpha:]]	Letters only
[[:digit:]]	Digits (0–9)
[[:lower:]]	Lowercase letters
[[:upper:]]	Uppercase letters
[[:space:]]	Whitespace
[[:punct:]]	Punctuation characters
[[:xdigit:]]	Hex digits (0–9, a–f, A–F)
[[:blank:]]	Space or tab

🔁 Quantifiers
Pattern	Meaning
*	0 or more repetitions
+	1 or more repetitions
?	0 or 1 occurrence
{n}	Exactly n times
{n,}	At least n times
{n,m}	Between n and m times (inclusive)

🧩 Anchors
Pattern	Meaning
^	Start of line
$	End of line

🔗 Groups and Alternation
Pattern	Meaning
(...)	Group for capturing
`a	b`

🔧 Escaping Special Characters
These characters must be escaped with a backslash:

ruby
Copy
Edit
. ^ $ * + ? ( ) [ ] { } | \
So:

txt
Copy
Edit
\+   matches a literal plus sign
\.   matches a literal dot
In C strings, you need to double the backslash, e.g. "\\+" in C++ means \+ in the actual regex.

✅ Common Examples
Description	Regex pattern
All digits	"^[0-9]+$"
All letters	"^[a-zA-Z]+$"
Alphanumeric	"^[a-zA-Z0-9]+$"
Valid C identifier	"^[a-zA-Z_][a-zA-Z0-9_]*$"
Hexadecimal number	"^0[xX][0-9a-fA-F]+$"
Email (basic)	"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
IPv4 address	"^([0-9]{1,3}\\.){3}[0-9]{1,3}$"
French phone (start +212)	"^\\+212[0-9]{9}$"

🛠 Tips for <regex.h> in C/C++
Always compile with REG_EXTENDED to use extended syntax.

Double backslashes in C string literals.

Use regexec() to test for matches.

Check return value: 0 = match, REG_NOMATCH = no match.